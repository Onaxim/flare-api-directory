[{"method":"claimReward","natSpec":{"return":[["_rewardAmount"," amount of total claimed rewards"]],"notice":"This function is intended to be used to claim rewards in case of delegation by percentage.","param":{"_rewardEpochs":"array of reward epoch numbers to claim for"},"dec":"Reverts if `msg.sender` is delegating by amount"}},{"method":"claimRewardFromDataProviders","natSpec":{"return":[["_rewardAmount"," amount of total claimed rewards"]],"notice":"This function is intended to be used to claim rewards in case of delegation by amount.","param":{"_dataProviders":"array of addresses representing data providers to claim the reward from"},"dec":"Function can be used by a percentage delegator but is more gas consuming than `claimReward`."}},{"method":"activate","natSpec":{"return":[],"notice":"Activates reward manager (allows claiming rewards)"}},{"method":"deactivate","natSpec":{"return":[],"notice":"Deactivates reward manager (prevents claiming rewards)"}},{"method":"setContractAddresses","natSpec":{"return":[],"notice":"Sets inflation, ftsoManager and wNat addresses.\nOnly governance can call this method."}},{"method":"distributeRewards","natSpec":{"return":[],"notice":"Distributes rewards to data providers accounts, according to input parameters.","dec":"must be called with totalWeight > 0 and addresses.length > 0"}},{"method":"setDataProviderFeePercentage","natSpec":{"return":[["Returns"," the reward epoch number when the setting becomes effective."]],"notice":"Allows data provider to set (or update last) fee percentage.","param":{"_feePercentageBIPS":"number representing fee percentage in BIPS"}}},{"method":"closeExpiredRewardEpoch","natSpec":{"return":[],"notice":"Collects funds from expired reward epoch and totals.","dec":"Triggered by ftsoManager on finalization of a reward epoch.\nOperation is irreversible: when some reward epoch is closed according to current\nsettings of parameters, it cannot be reopened even if new parameters would \nallow it since nextRewardEpochToExpire in ftsoManager never decreases."}},{"method":"getEpochReward","natSpec":{"return":[["_totalReward"," number representing the total epoch reward"],["_claimedReward"," number representing the amount of total epoch reward that has been claimed"]],"notice":"Returns information on epoch reward","param":{"_rewardEpoch":"reward epoch number"}}},{"method":"getInflationAddress","natSpec":{"return":[["The"," inflation address"]],"notice":"Returns the Inflation contract address.","dec":"Inflation receivers must have a reference to Inflation in order to receive native tokens for claiming."}},{"method":"getStateOfRewards","natSpec":{"return":[["_dataProviders"," positional array of addresses representing data providers"],["_rewardAmounts"," positional array of reward amounts"],["_claimed"," positional array of boolean values indicating if reward is claimed"],["_claimable"," boolean value indicating if rewards are claimable"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch`","param":{"_rewardEpoch":"reward epoch number"},"dec":"Reverts when queried with `_beneficary` delegating by amount"}},{"method":"getStateOfRewardsFromDataProviders","natSpec":{"return":[["_rewardAmounts"," positional array of reward amounts"],["_claimed"," positional array of boolean values indicating if reward is claimed"],["_claimable"," boolean value indicating if rewards are claimable"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`","param":{"_dataProviders":"positional array of addresses representing data providers"}}},{"method":"getEpochsWithClaimableRewards","natSpec":{"return":[["_startEpochId"," the oldest epoch id that allows reward claiming"],["_endEpochId"," the newest epoch id that allows reward claiming"]],"notice":"Returns the start and the end of the reward epoch range for which the reward is claimable"}},{"method":"getEpochsWithUnclaimedRewards","natSpec":{"return":[["_epochIds"," array of epoch ids"]],"notice":"Returns the array of claimable epoch ids for which the reward has not yet been claimed","param":{"_beneficiary":"address of reward beneficiary"},"dec":"Reverts when queried with `_beneficary` delegating by amount"}},{"method":"getUnclaimedReward","natSpec":{"return":[["_amount"," number representing the unclaimed amount"],["_weight"," number representing the share that has not yet been claimed"]],"notice":"Returns the information on unclaimed reward of `_dataProvider` for `_rewardEpoch`","param":{"_dataProvider":"address representing the data provider"}}},{"method":"getClaimedReward","natSpec":{"return":[["_claimed"," boolean indicating if reward has been claimed"],["_amount"," number representing the claimed amount"]],"notice":"Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`","param":{"_claimer":"address representing the claimer"}}},{"method":"getDataProviderCurrentFeePercentage","natSpec":{"return":[],"notice":"Returns the current fee percentage of `_dataProvider`","param":{"_dataProvider":"address representing data provider"}}},{"method":"getDataProviderScheduledFeePercentageChanges","natSpec":{"return":[["_feePercentageBIPS"," positional array of fee percentages in BIPS"],["_validFromEpoch"," positional array of block numbers the fee setings are effective from"],["_fixed"," positional array of boolean values indicating if settings are subjected to change"]],"notice":"Returns the scheduled fee percentage changes of `_dataProvider`","param":{"_dataProvider":"address representing data provider"}}},{"method":"getRewardEpochToExpireNext","natSpec":{"return":[["Reward"," epoch id that will expire next"]],"notice":"Return reward epoch that will expire, when new reward epoch is initialized"}},{"method":"getTokenPoolSupplyData","natSpec":{"return":[["_foundationAllocatedFundsWei"," Foundation allocated funds (wei)"],["_totalInflationAuthorizedWei"," Total inflation authorized amount (wei)"],["_totalClaimedWei"," Total claimed amount (wei)"]],"notice":"Return token pool supply data"}},{"method":"_claimReward","natSpec":{"return":[["Returns"," the total reward amount."]],"notice":"Claims `_rewardAmounts` for `_dataProviders`.","dec":"Internal function that takes care of reward bookkeeping","param":{"_rewardState":"object holding reward state"}}},{"method":"_transferReward","natSpec":{"return":[],"notice":"Transfers `_rewardAmount` to `_recipient`.","param":{"_rewardAmount":"number representing the amount to transfer"},"dec":"Uses low level call to transfer funds."}},{"method":"_getStateOfRewards","natSpec":{"return":[["_rewardState"," object holding reward state"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch`.","dec":"Reverts when queried with `_beneficary` delegating by amount.","param":{"_zeroForClaimed":"boolean value that enables skipping amount computation for claimed rewards"}}},{"method":"_getStateOfRewardsFromDataProviders","natSpec":{"return":[["_rewardState"," object holding reward state"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`","param":{"_zeroForClaimed":"boolean value that enables skipping amount computation for claimed rewards"}}},{"method":"_isRewardClaimable","natSpec":{"return":[],"notice":"Reports if rewards for `_rewardEpoch` are claimable.","param":{"_currentRewardEpoch":"number of the current reward epoch"}}},{"method":"_getEpochsWithClaimableRewards","natSpec":{"return":[["_startEpochId"," the oldest epoch id that allows reward claiming"],["_endEpochId"," the newest epoch id that allows reward claiming"]],"notice":"Returns the start and the end of the reward epoch range for which the reward is claimable"}},{"method":"_isRewardClaimed","natSpec":{"return":[],"notice":"Reports if reward at `_rewardEpoch` for `_dataProvider` has already been claimed by `_claimer`.","param":{"_claimer":"address representing a reward claimer"}}},{"method":"_getClaimedReward","natSpec":{"return":[],"notice":"Returns the reward amount at `_rewardEpoch` for `_dataProvider` claimed by `_claimer`.","param":{"_claimer":"address representing a reward claimer"}}},{"method":"_getRewardAmount","natSpec":{"return":[],"notice":"Returns the reward amount for `_dataProvider` at `_rewardEpoch`","param":{"_rewardWeight":"number representing reward weight"}}},{"method":"_getRewardWeightForDataProvider","natSpec":{"return":[],"notice":"Returns reward weight for `_dataProvider` at `_rewardEpoch`","param":{"_votePowerBlock":"block number used to determine the vote power for reward computation"}}},{"method":"_getRewardWeightForDelegator","natSpec":{"return":[],"notice":"Returns reward weight at `_rewardEpoch` for delegator delegating `_delegatedVotePower` to `_delegate`.","param":{"_rewardEpoch":"reward epoch number"}}},{"method":"_getDataProviderFeePercentage","natSpec":{"return":[],"notice":"Returns fee percentage setting for `_dataProvider` at `_rewardEpoch`.","param":{"_rewardEpoch":"reward epoch number"}}}]