{"FtsoRegistry":[{"method":"addFtso","natSpec":{"return":[],"notice":"Update current active FTSO contracts mapping","param":{"_ftsoContract":"new target FTSO contract"}}},{"method":"removeFtso","natSpec":{"return":[],"dec":"Reverts if the provided index is unsupported","param":{"_ftso":"ftso to remove"}}},{"method":"getFtso","natSpec":{"return":[["_activeFtso"," FTSO contract for provided index"]],"dec":"Reverts if unsupported index is passed"}},{"method":"getFtsoBySymbol","natSpec":{"return":[["_activeFtso"," FTSO contract for provided symbol"]],"dec":"Reverts if unsupported symbol is passed"}},{"method":"getCurrentPrice","natSpec":{"return":[["_price"," current price of asset in USD"],["_timestamp"," timestamp for when this price was updated"]],"notice":"Public view function to get the price of active FTSO for given asset index","dec":"Reverts if unsupported index is passed"}},{"method":"getSupportedIndices","natSpec":{"return":[["_supportedIndices"," the array of all active FTSO indices in increasing order. \nActive FTSOs are ones that currently receive price feeds."]]}},{"method":"getSupportedSymbols","natSpec":{"return":[["_supportedSymbols"," the array of all active FTSO symbols in increasing order. \nActive FTSOs are ones that currently receive price feeds."]]}},{"method":"getSupportedIndicesAndFtsos","natSpec":{"return":[["_supportedIndices"," the array of all supported indices"],["_ftsos"," the array of all supported ftsos"]],"notice":"Get array of all supported indices and corresponding FTSOs"}},{"method":"getSupportedSymbolsAndFtsos","natSpec":{"return":[["_supportedSymbols"," the array of all supported symbols"],["_ftsos"," the array of all supported ftsos"]],"notice":"Get array of all supported symbols and corresponding FTSOs"}},{"method":"getSupportedIndicesAndSymbols","natSpec":{"return":[["_supportedIndices"," the array of all supported indices"],["_supportedSymbols"," the array of all supported symbols"]],"notice":"Get array of all supported indices and corresponding symbols"}},{"method":"getSupportedIndicesSymbolsAndFtsos","natSpec":{"return":[["_supportedIndices"," the array of all supported indices"],["_supportedSymbols"," the array of all supported symbols"],["_ftsos"," the array of all supported ftsos"]],"notice":"Get array of all supported indices, corresponding symbols and FTSOs"}},{"method":"getSupportedFtsos","natSpec":{"return":[["_ftsos"," the array of all supported FTSOs"]],"notice":"Get array of all FTSO contracts for all supported asset indices. \nThe index of FTSO in returned array does not necessarily correspond to _assetIndex\nDue to deletion, some indices might be unsupported.","dec":"See `getSupportedIndicesAndFtsos` for pair of correct indices and `getAllFtsos` \nfor FTSOs at valid indices but with possible \"null\" holes."}},{"method":"getFtsos","natSpec":{"return":[["_ftsos"," the array of FTSOs"]],"notice":"Get the active FTSOs for given indices"}},{"method":"getAllFtsos","natSpec":{"return":[["_ftsos"," the array of all FTSOs"]],"notice":"Get array of all FTSO contracts for all supported asset indices","dec":"Return value might contain uninitialized FTSOS at zero address."}},{"method":"getFtsoHistory","natSpec":{"return":[["_ftsoAddressHistory"," the history of FTSOs contract for provided index"]],"notice":"Get the history of FTSOs for given index","dec":"If there are less then MAX_HISTORY_LENGTH the remaining addresses will be 0 addresses","param":{"_assetIndex":"asset index"}}},{"method":"_shiftHistory","natSpec":{"return":[],"notice":"Shift the FTSOs history by one so the FTSO at index 0 can be overwritten","dec":"Internal helper function"}},{"method":"_getFtso","natSpec":{"return":[],"notice":"Get the active FTSO for given index","dec":"Internal get ftso function so it can be used within other methods"}}],"VoterWhitelister":[{"method":"requestFullVoterWhitelisting","natSpec":{"return":[]}},{"method":"requestWhitelistingVoter","natSpec":{"return":[]}},{"method":"setMaxVotersForFtso","natSpec":{"return":[]}},{"method":"setDefaultMaxVotersForFtso","natSpec":{"return":[]}},{"method":"setContractAddresses","natSpec":{"return":[]}},{"method":"addFtso","natSpec":{"return":[]}},{"method":"removeFtso","natSpec":{"return":[]}},{"method":"removeTrustedAddressFromWhitelist","natSpec":{"return":[]}},{"method":"getFtsoWhitelistedPriceProvidersBySymbol","natSpec":{"return":[]}},{"method":"getFtsoWhitelistedPriceProviders","natSpec":{"return":[]}},{"method":"_requestWhitelistingVoter","natSpec":{"return":[]}},{"method":"_minVotePowerIndex","natSpec":{"return":[]}},{"method":"_getVotePowerWeights","natSpec":{"return":[]}},{"method":"_getNativeVotePowerWeights","natSpec":{"return":[]}},{"method":"_getAssetVotePowerWeights","natSpec":{"return":[]}},{"method":"_getVotePowers","natSpec":{"return":[]}},{"method":"_isTrustedAddress","natSpec":{"return":[]}},{"method":"_voterWhitelisted","natSpec":{"return":[]}},{"method":"_votersRemovedFromWhitelist","natSpec":{"return":[]}},{"method":"_arraySum","natSpec":{"return":[]}},{"method":"_computeWeightedSum","natSpec":{"return":[]}},{"method":"_findMinimum","natSpec":{"return":[]}}],"Ftso":[{"method":"submitPriceHashSubmitter","natSpec":{"return":[],"notice":"Emits PriceHashSubmitted event","param":{"_hash":"Hashed price and random number"}}},{"method":"revealPriceSubmitter","natSpec":{"return":[],"notice":"Emits PriceRevealed event","param":{"_random":"Submitted random number"}}},{"method":"finalizePriceEpoch","natSpec":{"return":[["_eligibleAddresses"," List of addresses eligible for reward"],["_natWeights"," List of native token weights corresponding to the eligible addresses"],["_natWeightsSum"," Sum of weights in _natWeights"]],"notice":"Computes epoch price based on gathered votes","param":{"_returnRewardData":"Parameter that determines if the reward data is returned"}}},{"method":"averageFinalizePriceEpoch","natSpec":{"return":[],"notice":"Forces finalization of price epoch calculating average price from trusted addresses","param":{"_epochId":"Id of the epoch to finalize"},"dec":"Used as a fallback method if epoch finalization is failing"}},{"method":"forceFinalizePriceEpoch","natSpec":{"return":[],"notice":"Forces finalization of price epoch - only called when exception happened","param":{"_epochId":"Id of the epoch to finalize"},"dec":"Used as a fallback method if epoch finalization is failing"}},{"method":"activateFtso","natSpec":{"return":[],"notice":"Initializes ftso immutable settings and activates oracle","param":{"_revealPeriod":"Duration of epoch reveal period in seconds"}}},{"method":"deactivateFtso","natSpec":{"return":[],"notice":"Deactivates oracle"}},{"method":"updateInitialPrice","natSpec":{"return":[]}},{"method":"configureEpochs","natSpec":{"return":[],"notice":"Sets configurable settings related to epochs","param":{"_trustedAddresses":"trusted addresses - use their prices if low nat turnout is not achieved"},"dec":"Should never revert if called from ftso manager"}},{"method":"setVotePowerBlock","natSpec":{"return":[],"notice":"Sets current vote power block","param":{"_votePowerBlock":"Vote power block"}}},{"method":"setAsset","natSpec":{"return":[],"notice":"Sets asset for FTSO to operate as single-asset oracle","param":{"_asset":"Asset"}}},{"method":"setAssetFtsos","natSpec":{"return":[],"notice":"Sets an array of FTSOs for FTSO to operate as multi-asset oracle","param":{"_assetFtsos":"Array of FTSOs"},"dec":"FTSOs implicitly determine the FTSO assets"}},{"method":"initializeCurrentEpochStateForReveal","natSpec":{"return":[],"notice":"Initializes current epoch instance for reveal","param":{"_fallbackMode":"Current epoch in fallback mode"}}},{"method":"getPriceEpochConfiguration","natSpec":{"return":[["_firstEpochStartTime"," First epoch start time"],["_submitPeriod"," Submit period in seconds"],["_revealPeriod"," Reveal period in seconds"]],"notice":"Returns current epoch data"}},{"method":"epochsConfiguration","natSpec":{"return":[],"notice":"Returns current configuration of epoch state"}},{"method":"getAsset","natSpec":{"return":[],"notice":"Returns the FTSO asset","dec":"asset is null in case of multi-asset FTSO"}},{"method":"getAssetFtsos","natSpec":{"return":[],"notice":"Returns the asset FTSOs","dec":"AssetFtsos is not null only in case of multi-asset FTSO"}},{"method":"getCurrentPrice","natSpec":{"return":[["_price"," Price in USD multiplied by ASSET_PRICE_USD_DECIMALS"],["_timestamp"," Time when price was updated for the last time"]],"notice":"Returns current asset price"}},{"method":"getEpochPrice","natSpec":{"return":[["Price"," in USD multiplied by ASSET_PRICE_USD_DECIMALS"]],"notice":"Returns asset price consented in specific epoch","param":{"_epochId":"Id of the epoch"}}},{"method":"getEpochPriceForVoter","natSpec":{"return":[["Price"," in USD multiplied by ASSET_PRICE_USD_DECIMALS"]],"notice":"Returns asset price submitted by voter in specific epoch","param":{"_voter":"Address of the voter"}}},{"method":"getCurrentRandom","natSpec":{"return":[["Random"," number"]],"notice":"Returns current random number","dec":"Should never revert"}},{"method":"getRandom","natSpec":{"return":[["Random"," number"]],"notice":"Returns random number of the specified epoch","param":{"_epochId":"Id of the epoch"}}},{"method":"getPriceEpochData","natSpec":{"return":[["_epochId"," Current epoch id"],["_epochSubmitEndTime"," End time of the current epoch price submission as seconds from unix epoch"],["_epochRevealEndTime"," End time of the current epoch price reveal as seconds from unix epoch"],["_votePowerBlock"," Vote power block for the current epoch"],["_fallbackMode"," Current epoch in fallback mode - only votes from trusted addresses will be used"]],"notice":"Returns current epoch data","dec":"half-closed intervals - end time not included"}},{"method":"getVoteWeightingParameters","natSpec":{"return":[["_assets"," the list of assets that are accounted in vote"],["_assetMultipliers"," weight multiplier of each asset in (multiasset) ftso"],["_totalVotePowerNat"," total native token vote power at block"],["_totalVotePowerAsset"," total combined asset vote power at block"],["_assetWeightRatio"," ratio of combined asset vp vs. native token vp (in BIPS)"],["_votePowerBlock"," vote powewr block for given epoch"]],"notice":"Returns parameters necessary for replicating vote weighting (used in VoterWhitelister)."}},{"method":"wNatVotePowerCached","natSpec":{"return":[],"notice":"Returns wNat vote power for the specified owner and the given epoch id","param":{"_epochId":"Id of the epoch"}}},{"method":"getCurrentEpochId","natSpec":{"return":[],"notice":"Returns current epoch id","dec":"Should never revert"}},{"method":"getEpochId","natSpec":{"return":[],"notice":"Returns id of the epoch which was opened for price submission at the specified timestamp","param":{"_timestamp":"Timestamp as seconds from unix epoch"},"dec":"Should never revert"}},{"method":"_submitPriceHash","natSpec":{"return":[],"notice":"Emits PriceHashSubmitted event","param":{"_hash":"Hashed price and random number"}}},{"method":"_revealPrice","natSpec":{"return":[],"notice":"Emits PriceRevealed event","param":{"_random":"Submitted random number"}}},{"method":"_getAssetData","natSpec":{"return":[["_assets"," List of assets"],["_votePowers"," List of vote powers"],["_prices"," List of asset prices"]],"notice":"Returns the list of assets and its vote powers"}},{"method":"_refreshAssets","natSpec":{"return":[],"notice":"Refreshes epoch state assets if FTSO is in multi-asset mode","dec":"Assets are determined by other single-asset FTSOs on which the asset may change at any time"}},{"method":"_averageFinalizePriceEpoch","natSpec":{"return":[],"notice":"Forces finalization of the epoch calculating average price from trusted addresses","param":{"_exception":"Indicates if the exception happened"},"dec":"Sets the price to be the average of prices from trusted addresses or force finalize if no votes submitted"}},{"method":"_forceFinalizePriceEpoch","natSpec":{"return":[],"notice":"Forces finalization of the epoch","param":{"_exception":"Indicates if the exception happened"},"dec":"Sets the median price to be equal to the price from the previous epoch (if epoch id is 0, price is 0)"}},{"method":"_writeEpochPriceData","natSpec":{"return":[],"notice":"Stores epoch data related to price\nTo be implemented in descendants"}},{"method":"_writeFallbackEpochPriceData","natSpec":{"return":[],"notice":"Stores epoch data related to price (fallback / low turnout / forced mode)\nTo be implemented in descendants"}},{"method":"_getVotePowerOf","natSpec":{"return":[],"notice":"Returns native token and asset vote power for epoch - returns (0, 0) if in fallback mode","param":{"_voterWNatVP":"Voter nat vote power as queried by price submitter"},"dec":"Checks if vote power is sufficient and adjusts vote power if it is too large"}},{"method":"_getVotePowerAt","natSpec":{"return":[],"notice":"Returns vote power of the given token at the specified block","param":{"_vpBlock":"Vote power block"},"dec":"Returns 0 if vote power token is null"}},{"method":"_getVotePowerOfAt","natSpec":{"return":[],"notice":"Returns vote power of the given token at the specified block and for the specified owner","param":{"_vpBlock":"Vote power block"},"dec":"Returns 0 if vote power token is null"}},{"method":"_readVotes","natSpec":{"return":[],"notice":"Extract vote data from epoch","param":{"_epoch":"Epoch instance"}}},{"method":"_readTrustedVotes","natSpec":{"return":[["_priceSum"," Sum of all prices submitted by trusted addresses"],["_count"," Number of prices submitted by trusted addresses"]],"notice":"Extract trusted vote data from epoch","param":{"_trustedAddresses":"List of trusted addresses"}}},{"method":"_readRewardData","natSpec":{"return":[],"notice":"Extracts reward data for epoch","param":{"_weightNat":"Array of native token weights"}}},{"method":"_getEpochForFinalization","natSpec":{"return":[["_epoch"," Return epoch instance"]],"notice":"Get epoch instance for given epoch id and check if it can be finished","param":{"_epochId":"Epoch id"}}},{"method":"_getEpochInstance","natSpec":{"return":[],"notice":"Return epoch instance if epoch id exists in storage, reverts if it is already overwritten","param":{"_epochId":"Epoch id"}}},{"method":"_isAddressEligible","natSpec":{"return":[["_eligible"," Return True if the address should be rewarded"]],"notice":"Checks if an address is eligible for reward (for edge quartile cases)","param":{"_address":"Address that submitted the price"}}}],"FtsoManager":[{"method":"activate","natSpec":{"return":[],"notice":"Activates FTSO manager (daemonize() runs jobs)"}},{"method":"daemonize","natSpec":{"return":[],"notice":"Runs task triggered by Daemon.\nThe tasks include the following by priority\n- finalizePriceEpoch     \n- Set governance parameters and initialize epochs\n- finalizeRewardEpoch"}},{"method":"addFtso","natSpec":{"return":[],"notice":"Adds FTSO to the list of rewarded FTSOs\nAll ftsos in multi asset ftso must be managed by this ftso manager"}},{"method":"removeFtso","natSpec":{"return":[],"notice":"Removes FTSO from the list of the rewarded FTSOs - revert if ftso is used in multi asset ftso","dec":"Deactivates _ftso"}},{"method":"replaceFtso","natSpec":{"return":[],"notice":"Replaces one ftso with another - symbols must match\nAll ftsos in multi asset ftso must be managed by this ftso manager","dec":"Deactivates _ftsoToRemove"}},{"method":"setFtsoAsset","natSpec":{"return":[],"notice":"Set asset for FTSO"}},{"method":"setFtsoAssetFtsos","natSpec":{"return":[],"notice":"Set asset FTSOs for FTSO - all ftsos should already be managed by this ftso manager"}},{"method":"setFallbackMode","natSpec":{"return":[],"notice":"Set fallback mode"}},{"method":"setFtsoFallbackMode","natSpec":{"return":[],"notice":"Set fallback mode for ftso"}},{"method":"setGovernanceParameters","natSpec":{"return":[],"notice":"Sets governance parameters for FTSOs"}},{"method":"getCurrentPriceEpochData","natSpec":{"return":[],"dec":"half-closed intervals - end time not included"}},{"method":"getRewardEpochVotePowerBlock","natSpec":{"return":[],"notice":"Gets vote power block of the specified reward epoch","param":{"_rewardEpoch":"Reward epoch sequence number"}}},{"method":"getCurrentRewardEpoch","natSpec":{"return":[],"notice":"Returns current reward epoch index (one currently running)"}},{"method":"_initializeFirstRewardEpoch","natSpec":{"return":[],"notice":"Initializes first reward epoch. Also sets vote power block to FTSOs"}},{"method":"_finalizeRewardEpoch","natSpec":{"return":[],"notice":"Finalizes reward epoch"}},{"method":"_closeExpiredRewardEpochs","natSpec":{"return":[],"notice":"Closes expired reward epochs"}},{"method":"_cleanupOnRewardEpochFinalization","natSpec":{"return":[],"notice":"Performs any cleanup needed immediately after a reward epoch is finalized"}},{"method":"_finalizePriceEpoch","natSpec":{"return":[],"notice":"Finalizes price epoch"}},{"method":"_initializeCurrentEpochFTSOStatesForReveal","natSpec":{"return":[],"notice":"Initializes epoch states in FTSOs for reveal. \nPrior to initialization it sets governance parameters, if \ngovernance has changed them. It also sets price submitter trusted addresses."}},{"method":"_checkAssetFtsosAreManaged","natSpec":{"return":[],"notice":"Check if asset ftsos are managed by this ftso manager, revert otherwise"}},{"method":"_checkMultiAssetFtsosAreManaged","natSpec":{"return":[],"notice":"Check if all multi asset ftsos are managed by this ftso manager, revert otherwise"}},{"method":"_getPriceEpochRevealEndTime","natSpec":{"return":[],"notice":"Returns price epoch reveal end time.","param":{"_priceEpochId":"The price epoch id."},"dec":"half-closed interval - end time not included"}},{"method":"_getPriceEpochEndTime","natSpec":{"return":[],"notice":"Returns price epoch end time.","param":{"_forPriceEpochId":"The price epoch id of the end time to fetch."},"dec":"half-closed interval - end time not included"}},{"method":"_getCurrentPriceEpochId","natSpec":{"return":[],"notice":"Returns current price epoch id. The calculation in this function\nshould fully match to definition of current epoch id in FTSO contracts."}}],"StateConnector":[],"PriceSubmitter":[{"method":"setContractAddresses","natSpec":{"return":[]}},{"method":"setTrustedAddresses","natSpec":{"return":[]}},{"method":"voterWhitelisted","natSpec":{"return":[]}},{"method":"votersRemovedFromWhitelist","natSpec":{"return":[]}},{"method":"submitPriceHashes","natSpec":{"return":[],"notice":"Emits PriceHashesSubmitted event","param":{"_hashes":"List of hashed price and random number"}}},{"method":"revealPrices","natSpec":{"return":[],"notice":"Emits PricesRevealed event","param":{"_randoms":"List of submitted random numbers"}}},{"method":"voterWhitelistBitmap","natSpec":{"return":[]}}],"Supply":[{"method":"updateAuthorizedInflationAndCirculatingSupply","natSpec":{"return":[],"notice":"Updates authorized inflation and circulating supply - emits event if error","param":{"_inflationAuthorizedWei":"Authorized inflation"},"dec":"Also updates the burn address amount"}},{"method":"setInflation","natSpec":{"return":[],"notice":"Sets inflation contract. Only governance can call this method."}},{"method":"addTokenPool","natSpec":{"return":[],"notice":"Adds token pool so it can call updateTokenPoolDistributedAmount method when \n   some tokens are distributed","param":{"_decreaseFoundationSupplyByAmountWei":"If token pool was given initial supply from fundation supply, \n   decrease it's value by this amount"}}},{"method":"decreaseFoundationSupply","natSpec":{"return":[],"notice":"Decrease foundation supply when foundation funds are released to a token pool or team members","param":{"_amountWei":"Amount to decrease by"}}},{"method":"changeBurnAddress","natSpec":{"return":[],"notice":"Change burn address","param":{"_burnAddress":"New burn address"},"dec":"Updates burn value for current address, changes to new address and updates again"}},{"method":"getCirculatingSupplyAtCached","natSpec":{"return":[["_circulatingSupplyWei"," Return approximate circulating supply for last known block <= _blockNumber"]],"notice":"Get approximate circulating supply for given block number from cache - only past block","param":{"_blockNumber":"Block number"}}},{"method":"getCirculatingSupplyAt","natSpec":{"return":[["_circulatingSupplyWei"," Return approximate circulating supply for last known block <= _blockNumber"]],"notice":"Get approximate circulating supply for given block number","param":{"_blockNumber":"Block number"}}},{"method":"getInflatableBalance","natSpec":{"return":[["_inflatableBalanceWei"," Return inflatable balance"]],"notice":"Get total inflatable balance (initial genesis amount + total authorized inflation)"}}],"Inflation":[{"method":"getTotals","natSpec":{"return":[["_totalAuthorizedInflationWei"," Total inflation authorized to be mintable"],["_totalInflationTopupRequestedWei"," Total inflation requested to be topped up for rewarding"],["_totalInflationTopupReceivedWei"," Total inflation received for funding reward services"],["_totalInflationTopupWithdrawnWei"," Total inflation used for funding reward services"],["_totalRecognizedInflationWei"," Total inflation recognized for rewarding"],["_totalSelfDestructReceivedWei"," Total balance received as a self-destruct recipient"],["_totalSelfDestructWithdrawnWei"," Total self-destruct balance withdrawn"]],"notice":"Get a tuple of totals across inflation annums."}},{"method":"getAnnum","natSpec":{"return":[["The"," inflation annum state."]],"notice":"Given an index, return the annum at that index.","param":{"_index":"The index of the annum to fetch."},"dec":"Expect library to revert if index not found."}},{"method":"getCurrentAnnum","natSpec":{"return":[["The"," inflation annum state of the current annum."]],"notice":"Return the current annum.","dec":"Expect library to revert if there is no current annum."}},{"method":"receiveMinting","natSpec":{"return":[],"notice":"Receive newly minted native tokens from the FlareDaemon.","dec":"Assume that the amount received will be >= last topup requested across all services.\n  If there is not enough balance sent to cover the topup request, expect library method will revert.\n  Also assume that any balance received greater than the topup request calculated\n  came from self-destructor sending a balance to this contract."}},{"method":"setInflationPercentageProvider","natSpec":{"return":[],"notice":"Set a reference to a provider of the annual inflation percentage.","param":{"_inflationPercentageProvider":"A contract providing the annual inflation percentage."},"dec":"Assume that referencing contract has reasonablness limitations on percentages."}},{"method":"setInflationSharingPercentageProvider","natSpec":{"return":[],"notice":"Set a reference to a provider of sharing percentages by inflation receiver.","param":{"_inflationSharingPercentageProvider":"A contract providing sharing percentages."},"dec":"Assume that sharing percentages sum to 100% if at least one exists, but\n  if no sharing percentages are defined, then no inflation will be authorized."}},{"method":"setSupply","natSpec":{"return":[],"notice":"Set a reference to the Supply contract.","param":{"_supply":"The Supply contract."},"dec":"The supply contract is used to get and update the inflatable balance."}},{"method":"setTopupConfiguration","natSpec":{"return":[],"notice":"Set the topup configuration for a reward service.","param":{"_topupFactorX100":"If _topupType == FACTOROFDAILYAUTHORIZED, then this factor (times 100)\n                         is multipled by last daily authorized inflation to obtain the"},"dec":"Topup factor, if _topupType == FACTOROFDAILYAUTHORIZED, must be greater than 100."}},{"method":"getTopupConfiguration","natSpec":{"return":[["_topupConfiguration"," The configurartion of how the topup requests are calculated for a given\n                         reward service."]],"notice":"Given an inflation receiver, get the topup configuration.","param":{"_inflationReceiver":"The reward service."}}},{"method":"daemonize","natSpec":{"return":[],"notice":"Pulsed by the FlareDaemon to trigger timing-based events for the inflation process.","dec":"There are two events:\n  1) an annual event to recognize inflation for a new annum\n  2) a daily event to:\na) authorize mintable inflation for rewarding"}},{"method":"getExpectedBalance","natSpec":{"return":[],"notice":"Compute the expected balance of this contract.","param":{"_balanceExpectedWei":"The computed balance expected."}}}],"WNat":[{"method":"withdrawFrom","natSpec":{"return":[],"notice":"Withdraw WNAT from an owner and send native tokens to msg.sender given an allowance.","param":{"amount":"The amount to spend.\n\nRequirements:\n\n- `owner` must have a balance of at least `amount`.\n- the caller must have allowance for `owners`'s tokens of at least\n`amount`."}}},{"method":"depositTo","natSpec":{"return":[],"notice":"Deposit Native from msg.sender and mints WNAT ERC20 to recipient address.","param":{"recipient":"An address to receive minted WNAT."}}},{"method":"deposit","natSpec":{"return":[],"notice":"Deposit Native and mint wNat ERC20."}},{"method":"withdraw","natSpec":{"return":[],"notice":"Withdraw Native and burn WNAT ERC20.","param":{"amount":"The amount to withdraw."}}}],"FtsoRewardManager":[{"method":"claimReward","natSpec":{"return":[["_rewardAmount"," amount of total claimed rewards"]],"notice":"This function is intended to be used to claim rewards in case of delegation by percentage.","param":{"_rewardEpochs":"array of reward epoch numbers to claim for"},"dec":"Reverts if `msg.sender` is delegating by amount"}},{"method":"claimRewardFromDataProviders","natSpec":{"return":[["_rewardAmount"," amount of total claimed rewards"]],"notice":"This function is intended to be used to claim rewards in case of delegation by amount.","param":{"_dataProviders":"array of addresses representing data providers to claim the reward from"},"dec":"Function can be used by a percentage delegator but is more gas consuming than `claimReward`."}},{"method":"activate","natSpec":{"return":[],"notice":"Activates reward manager (allows claiming rewards)"}},{"method":"deactivate","natSpec":{"return":[],"notice":"Deactivates reward manager (prevents claiming rewards)"}},{"method":"setContractAddresses","natSpec":{"return":[],"notice":"Sets inflation, ftsoManager and wNat addresses.\nOnly governance can call this method."}},{"method":"distributeRewards","natSpec":{"return":[],"notice":"Distributes rewards to data providers accounts, according to input parameters.","dec":"must be called with totalWeight > 0 and addresses.length > 0"}},{"method":"setDataProviderFeePercentage","natSpec":{"return":[["Returns"," the reward epoch number when the setting becomes effective."]],"notice":"Allows data provider to set (or update last) fee percentage.","param":{"_feePercentageBIPS":"number representing fee percentage in BIPS"}}},{"method":"closeExpiredRewardEpoch","natSpec":{"return":[],"notice":"Collects funds from expired reward epoch and totals.","dec":"Triggered by ftsoManager on finalization of a reward epoch.\nOperation is irreversible: when some reward epoch is closed according to current\nsettings of parameters, it cannot be reopened even if new parameters would \nallow it since nextRewardEpochToExpire in ftsoManager never decreases."}},{"method":"getEpochReward","natSpec":{"return":[["_totalReward"," number representing the total epoch reward"],["_claimedReward"," number representing the amount of total epoch reward that has been claimed"]],"notice":"Returns information on epoch reward","param":{"_rewardEpoch":"reward epoch number"}}},{"method":"getInflationAddress","natSpec":{"return":[["The"," inflation address"]],"notice":"Returns the Inflation contract address.","dec":"Inflation receivers must have a reference to Inflation in order to receive native tokens for claiming."}},{"method":"getStateOfRewards","natSpec":{"return":[["_dataProviders"," positional array of addresses representing data providers"],["_rewardAmounts"," positional array of reward amounts"],["_claimed"," positional array of boolean values indicating if reward is claimed"],["_claimable"," boolean value indicating if rewards are claimable"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch`","param":{"_rewardEpoch":"reward epoch number"},"dec":"Reverts when queried with `_beneficary` delegating by amount"}},{"method":"getStateOfRewardsFromDataProviders","natSpec":{"return":[["_rewardAmounts"," positional array of reward amounts"],["_claimed"," positional array of boolean values indicating if reward is claimed"],["_claimable"," boolean value indicating if rewards are claimable"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`","param":{"_dataProviders":"positional array of addresses representing data providers"}}},{"method":"getEpochsWithClaimableRewards","natSpec":{"return":[["_startEpochId"," the oldest epoch id that allows reward claiming"],["_endEpochId"," the newest epoch id that allows reward claiming"]],"notice":"Returns the start and the end of the reward epoch range for which the reward is claimable"}},{"method":"getEpochsWithUnclaimedRewards","natSpec":{"return":[["_epochIds"," array of epoch ids"]],"notice":"Returns the array of claimable epoch ids for which the reward has not yet been claimed","param":{"_beneficiary":"address of reward beneficiary"},"dec":"Reverts when queried with `_beneficary` delegating by amount"}},{"method":"getUnclaimedReward","natSpec":{"return":[["_amount"," number representing the unclaimed amount"],["_weight"," number representing the share that has not yet been claimed"]],"notice":"Returns the information on unclaimed reward of `_dataProvider` for `_rewardEpoch`","param":{"_dataProvider":"address representing the data provider"}}},{"method":"getClaimedReward","natSpec":{"return":[["_claimed"," boolean indicating if reward has been claimed"],["_amount"," number representing the claimed amount"]],"notice":"Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`","param":{"_claimer":"address representing the claimer"}}},{"method":"getDataProviderCurrentFeePercentage","natSpec":{"return":[],"notice":"Returns the current fee percentage of `_dataProvider`","param":{"_dataProvider":"address representing data provider"}}},{"method":"getDataProviderScheduledFeePercentageChanges","natSpec":{"return":[["_feePercentageBIPS"," positional array of fee percentages in BIPS"],["_validFromEpoch"," positional array of block numbers the fee setings are effective from"],["_fixed"," positional array of boolean values indicating if settings are subjected to change"]],"notice":"Returns the scheduled fee percentage changes of `_dataProvider`","param":{"_dataProvider":"address representing data provider"}}},{"method":"getRewardEpochToExpireNext","natSpec":{"return":[["Reward"," epoch id that will expire next"]],"notice":"Return reward epoch that will expire, when new reward epoch is initialized"}},{"method":"getTokenPoolSupplyData","natSpec":{"return":[["_foundationAllocatedFundsWei"," Foundation allocated funds (wei)"],["_totalInflationAuthorizedWei"," Total inflation authorized amount (wei)"],["_totalClaimedWei"," Total claimed amount (wei)"]],"notice":"Return token pool supply data"}},{"method":"_claimReward","natSpec":{"return":[["Returns"," the total reward amount."]],"notice":"Claims `_rewardAmounts` for `_dataProviders`.","dec":"Internal function that takes care of reward bookkeeping","param":{"_rewardState":"object holding reward state"}}},{"method":"_transferReward","natSpec":{"return":[],"notice":"Transfers `_rewardAmount` to `_recipient`.","param":{"_rewardAmount":"number representing the amount to transfer"},"dec":"Uses low level call to transfer funds."}},{"method":"_getStateOfRewards","natSpec":{"return":[["_rewardState"," object holding reward state"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch`.","dec":"Reverts when queried with `_beneficary` delegating by amount.","param":{"_zeroForClaimed":"boolean value that enables skipping amount computation for claimed rewards"}}},{"method":"_getStateOfRewardsFromDataProviders","natSpec":{"return":[["_rewardState"," object holding reward state"]],"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`","param":{"_zeroForClaimed":"boolean value that enables skipping amount computation for claimed rewards"}}},{"method":"_isRewardClaimable","natSpec":{"return":[],"notice":"Reports if rewards for `_rewardEpoch` are claimable.","param":{"_currentRewardEpoch":"number of the current reward epoch"}}},{"method":"_getEpochsWithClaimableRewards","natSpec":{"return":[["_startEpochId"," the oldest epoch id that allows reward claiming"],["_endEpochId"," the newest epoch id that allows reward claiming"]],"notice":"Returns the start and the end of the reward epoch range for which the reward is claimable"}},{"method":"_isRewardClaimed","natSpec":{"return":[],"notice":"Reports if reward at `_rewardEpoch` for `_dataProvider` has already been claimed by `_claimer`.","param":{"_claimer":"address representing a reward claimer"}}},{"method":"_getClaimedReward","natSpec":{"return":[],"notice":"Returns the reward amount at `_rewardEpoch` for `_dataProvider` claimed by `_claimer`.","param":{"_claimer":"address representing a reward claimer"}}},{"method":"_getRewardAmount","natSpec":{"return":[],"notice":"Returns the reward amount for `_dataProvider` at `_rewardEpoch`","param":{"_rewardWeight":"number representing reward weight"}}},{"method":"_getRewardWeightForDataProvider","natSpec":{"return":[],"notice":"Returns reward weight for `_dataProvider` at `_rewardEpoch`","param":{"_votePowerBlock":"block number used to determine the vote power for reward computation"}}},{"method":"_getRewardWeightForDelegator","natSpec":{"return":[],"notice":"Returns reward weight at `_rewardEpoch` for delegator delegating `_delegatedVotePower` to `_delegate`.","param":{"_rewardEpoch":"reward epoch number"}}},{"method":"_getDataProviderFeePercentage","natSpec":{"return":[],"notice":"Returns fee percentage setting for `_dataProvider` at `_rewardEpoch`.","param":{"_rewardEpoch":"reward epoch number"}}}]}