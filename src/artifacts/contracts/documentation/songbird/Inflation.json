[{"method":"getTotals","natSpec":{"return":[["_totalAuthorizedInflationWei"," Total inflation authorized to be mintable"],["_totalInflationTopupRequestedWei"," Total inflation requested to be topped up for rewarding"],["_totalInflationTopupReceivedWei"," Total inflation received for funding reward services"],["_totalInflationTopupWithdrawnWei"," Total inflation used for funding reward services"],["_totalRecognizedInflationWei"," Total inflation recognized for rewarding"],["_totalSelfDestructReceivedWei"," Total balance received as a self-destruct recipient"],["_totalSelfDestructWithdrawnWei"," Total self-destruct balance withdrawn"]],"notice":"Get a tuple of totals across inflation annums."}},{"method":"getAnnum","natSpec":{"return":[["The"," inflation annum state."]],"notice":"Given an index, return the annum at that index.","param":{"_index":"The index of the annum to fetch."},"dec":"Expect library to revert if index not found."}},{"method":"getCurrentAnnum","natSpec":{"return":[["The"," inflation annum state of the current annum."]],"notice":"Return the current annum.","dec":"Expect library to revert if there is no current annum."}},{"method":"receiveMinting","natSpec":{"return":[],"notice":"Receive newly minted native tokens from the FlareDaemon.","dec":"Assume that the amount received will be >= last topup requested across all services.\n  If there is not enough balance sent to cover the topup request, expect library method will revert.\n  Also assume that any balance received greater than the topup request calculated\n  came from self-destructor sending a balance to this contract."}},{"method":"setInflationPercentageProvider","natSpec":{"return":[],"notice":"Set a reference to a provider of the annual inflation percentage.","param":{"_inflationPercentageProvider":"A contract providing the annual inflation percentage."},"dec":"Assume that referencing contract has reasonablness limitations on percentages."}},{"method":"setInflationSharingPercentageProvider","natSpec":{"return":[],"notice":"Set a reference to a provider of sharing percentages by inflation receiver.","param":{"_inflationSharingPercentageProvider":"A contract providing sharing percentages."},"dec":"Assume that sharing percentages sum to 100% if at least one exists, but\n  if no sharing percentages are defined, then no inflation will be authorized."}},{"method":"setSupply","natSpec":{"return":[],"notice":"Set a reference to the Supply contract.","param":{"_supply":"The Supply contract."},"dec":"The supply contract is used to get and update the inflatable balance."}},{"method":"setTopupConfiguration","natSpec":{"return":[],"notice":"Set the topup configuration for a reward service.","param":{"_topupFactorX100":"If _topupType == FACTOROFDAILYAUTHORIZED, then this factor (times 100)\n                         is multipled by last daily authorized inflation to obtain the"},"dec":"Topup factor, if _topupType == FACTOROFDAILYAUTHORIZED, must be greater than 100."}},{"method":"getTopupConfiguration","natSpec":{"return":[["_topupConfiguration"," The configurartion of how the topup requests are calculated for a given\n                         reward service."]],"notice":"Given an inflation receiver, get the topup configuration.","param":{"_inflationReceiver":"The reward service."}}},{"method":"daemonize","natSpec":{"return":[],"notice":"Pulsed by the FlareDaemon to trigger timing-based events for the inflation process.","dec":"There are two events:\n  1) an annual event to recognize inflation for a new annum\n  2) a daily event to:\na) authorize mintable inflation for rewarding"}},{"method":"getExpectedBalance","natSpec":{"return":[],"notice":"Compute the expected balance of this contract.","param":{"_balanceExpectedWei":"The computed balance expected."}}}]