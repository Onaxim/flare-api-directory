[{"method":"getTokenPoolSupplyData","natSpec":{"return":[["_lockedFundsWei"," Funds that are intentionally locked in the token pool \nand not part of circulating supply"],["_totalInflationAuthorizedWei"," Total inflation authorized amount (wei)"],["_totalClaimedWei"," Total claimed amount (wei)"]],"notice":"Return token pool supply data"}},{"method":"getTotals","natSpec":{"return":[["_totalAuthorizedIncentiveWei"," Total authorized incentive"],["_totalIncentiveTopupRequestedWei"," Total incentive requested to be topped up for rewarding"],["_totalIncentiveTopupReceivedWei"," Total incentive received for funding reward services"],["_totalIncentiveTopupWithdrawnWei"," Total incentive used for funding reward services"],["_totalRecognizedIncentiveWei"," Total incentive recognized for rewarding"]],"notice":"Get a tuple of totals across incentivePool annums."}},{"method":"getAnnum","natSpec":{"return":[["The"," incentivePool annum state."]],"notice":"Given an index, return the annum at that index.","param":{"_index":"The index of the annum to fetch."},"dec":"Expect library to revert if index not found."}},{"method":"getCurrentAnnum","natSpec":{"return":[["The"," incentivePool annum state of the current annum."]],"notice":"Return the current annum.","dec":"Expect library to revert if there is no current annum."}},{"method":"setTopupConfiguration","natSpec":{"return":[],"notice":"Set the topup configuration for a reward service.","param":{"_topupFactorX100":"If _topupType == FACTOROFDAILYAUTHORIZED, then this factor (times 100)\n                         is multipled by last daily authorized incentive to obtain the"},"dec":"Topup factor, if _topupType == FACTOROFDAILYAUTHORIZED, must be > 100 and <= 400."}},{"method":"getTopupConfiguration","natSpec":{"return":[["_topupConfiguration"," The configurartion of how the topup requests are calculated for a given\n                         reward service."]],"notice":"Given an incentivePool receiver, get the topup configuration.","param":{"_incentivePoolReceiver":"The reward service."}}},{"method":"daemonize","natSpec":{"return":[],"notice":"Pulsed by the FlareDaemon to trigger timing-based events for the incentive process.","dec":"There are two events:\n  1) an annual event to recognize incentive for a new annum\n  2) a daily event to:\na) authorize incentive for rewarding"}},{"method":"getContractName","natSpec":{"return":[],"notice":"Implement this function for updating daemonized contracts through AddressUpdater."}},{"method":"getNextExpectedTopupTs","natSpec":{"return":[],"notice":"Returns next expected incentive topup timestamp which is also incentive authorization time. \nThe returned time from this API is actually the time of the block in which the topup is requested."}},{"method":"_updateContractAddresses","natSpec":{"return":[],"notice":"Set a reference to a provider of the annual incentivePool percentage.","dec":"Assume that referencing contract has reasonablness limitations on percentages."}}]